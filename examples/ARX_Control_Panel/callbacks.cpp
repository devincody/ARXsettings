

/*
 * callbacks.cpp -- part of the ARX_Control_Panel project.
 * Implementation of callbacks -- YOUR code goes here!
 * Mysterion the Anonymous
 *  
 * 
 * Copyright (C) 2017 Mysterion the Anonymous
 * 
 * Generated by DruidBuilder [https://devicedruid.com/], 
 * as part of project "1f8713a7bb094eb08afe4a38536f8817bPPUA7QTnA",
 * aka ARX_Control_Panel.
 * 
 * Druid4Arduino, Device Druid, Druid Builder, the builder 
 * code brewery and its wizards, SerialUI and supporting 
 * libraries, as well as the generated parts of this program 
 * are 
 *            Copyright (C) 2013-2017 Pat Deegan 
 * [http://psychogenic.com/ | http://flyingcarsandstuff.com/]
 * and distributed under the terms of their respective licenses.
 * See http://devicedruid.com for details.
 * 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE 
 * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 * 
 * Keep in mind that there is no warranty and you are solely 
 * responsible for the use of all these cool tools.
 * 
 * Play safe, have fun.
 * 
 */


/* we need the SerialUI lib */
#include <SerialUI.h>
#include <ARXsettings.h>
#include "ARX_Control_PanelSettings.h"

/* our project specific types and functions are here */
#include "ARX_Control_Panel.h"



/* 
 * In addition to any custom globals you declared,
 * here you have access to:
 * 
 * *** MySUI -- the SerialUI instance.
 * Use it as you would the Serial device, e.g.
 * 	MySUI.println(F("Helloooo..."));
 * 	
 * 	
 * *** MyInputs -- a container for 
 * values submitted by users. Contents:
 *  
 *    MyInputs.Filter (long int)
 *    MyInputs.AT1 (long int)
 *    MyInputs.AT2 (long int)
 *    MyInputs.ATS (long int)
 *    MyInputs.FEE (bool)
 *    MyInputs.ChannelNumber (long int)
 *    MyInputs.TogglePeriod (long int)
 *  
 *  
 *  
 * 
 */





/* ********* callbacks and validation functions ********* */

ARXsetting brd;


/* *** Main Menu *** */
namespace MainMenu {
  
void doINITSPI(){
    brd.init_SPI();
}


void FilterChanged() {

    /* Filter value was modified.
    * It is a long int accessible in MyInputs.Filter
    */
    MySUI.print(F("Filter is now:"));
    MySUI.println(MyInputs.Filter);

}

void AT1Changed() {

    /* AT1 value was modified.
    * It is a long int accessible in MyInputs.AT1
    */
    MySUI.print(F("AT1 is now:"));
    MySUI.println(MyInputs.AT1);

}

void AT2Changed() {

    /* AT2 value was modified.
    * It is a long int accessible in MyInputs.AT2
    */
    MySUI.print(F("AT2 is now:"));
    MySUI.println(MyInputs.AT2);

}

void ATSChanged() {

    /* ATS value was modified.
    * It is a long int accessible in MyInputs.ATS
    */
    MySUI.print(F("ATS is now:"));
    MySUI.println(MyInputs.ATS);

}

void FEEChanged() {

    /* FEE value was modified.
    * It is a bool accessible in MyInputs.FEE
    */
    MySUI.print(F("FEE is now:"));
    MySUI.println(MyInputs.FEE ? F("ON") : F("OFF"));
}

void ChannelNumberChanged() {

    /* Channel Number value was modified.
    * It is a long int accessible in MyInputs.ChannelNumber
    */
    MySUI.print(F("Channel Number is now:"));
    MySUI.println(MyInputs.ChannelNumber);

}

void doUpdateChannel() {

    /* Update Channel triggered */
    MySUI.println(F("Update Channel triggered!"));
    brd.setFilter(MyInputs.ChannelNumber, MyInputs.Filter);
   //  switch(MyInputs.Filter){
   //  	case 1:
   // 			brd.setFilter(MyInputs.ChannelNumber, SPLIT);
   // 			break;
   // 		case 2:
   // 			brd.setFilter(MyInputs.ChannelNumber, THRU);
   // 			break;
   // 		case 3:
   // 			brd.setFilter(MyInputs.ChannelNumber, BLOCKED);
   // 			break;
   // 		case 4:
   // 			brd.setFilter(MyInputs.ChannelNumber, REDUCED);
   // 			break;
 		// }
   // 	}
    brd.setAt1(MyInputs.ChannelNumber, MyInputs.AT1);
    brd.setAt2(MyInputs.ChannelNumber, MyInputs.AT2);
    brd.setAts(MyInputs.ChannelNumber, MyInputs.ATS);
    brd.setFEE(MyInputs.ChannelNumber, MyInputs.FEE);
}

void doUpdateAllChannels() {

    /* Update All Channels triggered */
    MySUI.println(F("Update All Channels triggered!"));
    brd.setFilter_all(MyInputs.Filter);
    brd.setAt1_all(MyInputs.AT1);
    brd.setAt2_all(MyInputs.AT2);
    brd.setAts_all(MyInputs.ATS);
    brd.setFEE_all(MyInputs.FEE);

}

void doSendToAllChannels() {

    /* Send to All Channels triggered */
    MySUI.println(F("Send to All Channels triggered!"));
    brd.sendReg_all();

}


/* *** Main Menu -> Advanced *** */
namespace Advanced {


void doSetAllToDefault() {

    /* Set All to Default triggered */
    MySUI.println(F("Set All to Default triggered!"));
	  brd.setFilter_all(ARXsetting::SPLIT);
    brd.setAt1_all(14);
    brd.setAt2_all(14);
    brd.setAts_all(30);
    brd.setFEE_all(false);

}

void TogglePeriodChanged() {

    /* Toggle Period value was modified.
    * It is a long int accessible in MyInputs.TogglePeriod
    */
    MySUI.print(F("Toggle Period is now:"));
    MySUI.println(MyInputs.TogglePeriod);

}

void doToggleAT1() {

    /* Toggle AT1 triggered */
    MySUI.println(F("Toggle AT1 triggered!"));
    MySUI.print(F("10 Cycles will be executed with a period of "));
    MySUI.print(MyInputs.TogglePeriod);
    MySUI.println(F(" milliseconds"));

    for (int i = 0; i < 10; i++){
	    brd.setAt1_all(0);
	    delay(MyInputs.TogglePeriod/2);
	    brd.setAt1_all(30);
	    delay(MyInputs.TogglePeriod/2);
	}
}

void doToggleAT2() {

    /* Toggle AT2 triggered */
    MySUI.println(F("Toggle AT2 triggered!"));
    MySUI.print(F("10 Cycles will be executed with a period of "));
    MySUI.print(MyInputs.TogglePeriod);
    MySUI.print(F(" milliseconds"));

    for (int i = 0; i < 10; i++){
	    brd.setAt2_all(0);
	    delay(MyInputs.TogglePeriod/2);
	    brd.setAt2_all(30);
	    delay(MyInputs.TogglePeriod/2);
	}
}

void doToggleATS() {

    /* Toggle ATS triggered */
    MySUI.println(F("Toggle ATS triggered!"));
    MySUI.print(F("10 Cycles will be executed with a period of "));
    MySUI.print(MyInputs.TogglePeriod);
    MySUI.print(F(" milliseconds"));

    for (int i = 0; i < 10; i++){
	    brd.setAts_all(0);
	    delay(MyInputs.TogglePeriod/2);
	    brd.setAts_all(30);
	    delay(MyInputs.TogglePeriod/2);
	}
}

void doToggleFilter() {

    /* Toggle Filter triggered */
    MySUI.println(F("Toggle Filter triggered!"));
    MySUI.print(F("10 Cycles will be executed with a period of "));
    MySUI.print(MyInputs.TogglePeriod);
    MySUI.print(F(" milliseconds"));

    for (int i = 0; i < 10; i++){
	    brd.setFilter_all(ARXsetting::SPLIT);
	    delay(MyInputs.TogglePeriod/2);
	    brd.setFilter_all(ARXsetting::BLOCKED);
	    delay(MyInputs.TogglePeriod/2);
	}
}

void doToggleFEE() {

    /* Toggle FEE triggered */
    MySUI.println(F("Toggle FEE triggered!"));
    MySUI.print(F("10 Cycles will be executed with a period of "));
    MySUI.print(MyInputs.TogglePeriod);
    MySUI.print(F(" milliseconds"));

    for (int i = 0; i < 10; i++){
	    brd.setFEE_all(false);
	    delay(MyInputs.TogglePeriod/2);
	    brd.setFEE_all(true);
	    delay(MyInputs.TogglePeriod/2);
	}
}









} /* namespace Advanced */



} /* namespace MainMenu */





